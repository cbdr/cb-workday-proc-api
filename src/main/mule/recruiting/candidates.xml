<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
	<http:request-config name="HTTP_Request_configuration_workday1" doc:name="HTTP Request configuration" doc:id="e494efe4-752e-4a03-9333-44351774c106" responseTimeout="${http.requestTimeout}" >
		<http:request-connection protocol="${http.protocol}" host="${api.host}" port="${api.port}" />
	</http:request-config>
	<flow name="prepare-create-candidates" doc:id="f7f86912-e02d-4d21-82e2-18a5b3c854e6">
		<ee:transform doc:name="Transform Message" doc:id="d2fb488e-9882-43ad-9a14-a18356ed87ae">
			<ee:message>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="putCandidateRequest" ><![CDATA[%dw 2.0
output application/json
fun getNameData(candidateReq)={
	Legal_Name: {
		Name_Detail_Data: {
			First_Name: candidateReq.firstName,
			(Middle_Name: candidateReq.middleName) if(candidateReq.middleName?),
			Last_Name: candidateReq.lastName,
		}
	}
}
fun getContactData(candidateReq)={
	Phone_Number: candidateReq.phoneNumbers[0].phoneNumber replace  /\s/ with "",
	Email_Address: candidateReq.email[0],
	Location_Data: {
		(Address_Line_1: candidateReq.geography.address) if(candidateReq.geography.address?),
		(City: candidateReq.geography.locality) if(candidateReq.geography.locality?),
		(Postal_Code: candidateReq.geography.postalCode) if(candidateReq.geography.postalCode?),
		(Country: candidateReq.geography.country) if(candidateReq.geography.country?)
	}
}
fun getJobAppliedToData(candidateReq)={
	Job_Requisition_Reference: {
		ID: candidateReq.documents.requisition.requisitionId
	}
}
fun getResumeAttachmentData(candidateReq)={
	Filename: candidateReq.documents.resume.fileName,
	File_Content: candidateReq.documents.resume.document
}
fun getResumeData(candidateReq)={
	(Summary: candidateReq.documents.resume.text) if(candidateReq.documents.resume.text?),
	File_Content: candidateReq.documents.resume.document,
	(Experience_Data: getExperienceData(candidateReq)) if (candidateReq.documents.workHistory.histories !=null)
}
fun getExperienceData(candidateReq)=
	 candidateReq.documents.workHistory.histories map ((item) ->
  {
      Company_Name: item.company,
      Title: item.jobTitle,
      Start_Month: item.startDate as DateTime as String {format: "MM"},
      Start_Year: item.startDate as DateTime as String {format: "yyyy"},
      End_Month: item.endDate as DateTime as String {format: "MM"},
      End_Year: item.endDate as DateTime as String {format: "yyyy"}
  }
 )

---
if(vars.candidate !=null and !isEmpty(vars.candidate) and vars.jobRequisitionsDetails !=null and !isEmpty(vars.jobRequisitionsDetails)) {
	Candidate: {
		Candidate_Reference: {
			ID: vars.candidate.Candidate_Reference.ID
		},
		Candidate_Data: {
			Name_Data: getNameData((vars.originalPayload.candidate)),
			Contact_Data: getContactData(vars.originalPayload.candidate),
			Job_Application_Data: {
				Job_Applied_To_Data: getJobAppliedToData(vars.originalPayload.candidate),
				Resume_Attachment_Data: getResumeAttachmentData(vars.originalPayload.candidate),
				Resume_Data: getResumeData(vars.originalPayload.candidate)
			}
		}
	}
}
else if((isEmpty(vars.candidate)  and vars.jobRequisitionsDetails !=null and !isEmpty(vars.jobRequisitionsDetails))) {
	Candidate: {
		Candidate_Data: {
			Name_Data: getNameData((vars.originalPayload.candidate)),
			Contact_Data: getContactData(vars.originalPayload.candidate),
			Job_Application_Data: {
				Job_Applied_To_Data: getJobAppliedToData(vars.originalPayload.candidate),
				Resume_Attachment_Data: getResumeAttachmentData(vars.originalPayload.candidate),
				Resume_Data: getResumeData(vars.originalPayload.candidate)
			}
		}
	}
}
else {
	Candidate: {
		Candidate_Data: {
			Name_Data: getNameData(vars.originalPayload.candidate),
			Contact_Data: getContactData(vars.originalPayload.candidate)			
		}
	}
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<flow-ref doc:name="Put Candidate" doc:id="00b9c8ef-6236-4cc6-b49c-8ecbda96f05a" name="put-candidatesFlow"/>
	</flow>
	<flow name="put-candidatesFlow" doc:id="f3489abf-1273-463b-bc92-eea3bdcbf045" >
		<logger level="DEBUG" doc:name="Logger" doc:id="fc9ffb0a-5835-4d4e-872d-085ece4b98c6" message="Put Candidate Request : #[vars.putCandidateRequest]"/>
		<http:request method="POST" doc:name="Put Candidates Request " doc:id="421dbbd8-4cf8-45ec-9ae2-4a8786ed0663" config-ref="HTTP_Request_configuration_workday" path="${cb-workday-sys-api.recruiting.create-candidates-uri}" >
			<http:body ><![CDATA[#[vars.putCandidateRequest]]]></http:body>
			<http:headers ><![CDATA[#[output application/java
---
{
	"client_secret" : vars.client_secret,
	"password" : p('secure::cb-workday-sys-api.headers.password'),
	"client_id" : vars.client_id,
	"tenantName" : p('cb-workday-sys-api.headers.tenantName'),
	"userName" : p('cb-workday-sys-api.headers.userName')
}]]]></http:headers>
		</http:request>
		<logger level="INFO" doc:name="Logger" doc:id="2c821632-bca8-4466-a8b9-64be1d813631" message="#[payload]"/>
	</flow>
	<flow name="get-candidatesFlow" doc:id="207f5b99-fcd3-4e99-be49-0bfda9a7649b" >
		<http:request method="GET" doc:name="Get Candidates Request By Email" doc:id="7e59f0c8-80fa-4b09-8db4-8722075121af" config-ref="HTTP_Request_configuration_workday" path="${cb-workday-sys-api.recruiting.get-candidates-uri}">
			<http:headers ><![CDATA[#[output application/java
---
{
	"client_secret" : vars.client_secret,
	"password" : p('secure::cb-workday-sys-api.headers.password'),
	"client_id" : vars.client_id,
	"tenantName" : p('cb-workday-sys-api.headers.tenantName'),
	"userName" : p('cb-workday-sys-api.headers.userName')
}]]]></http:headers>
			<http:query-params ><![CDATA[#[output application/java
---
{
	("email" : vars.originalPayload.candidate.email[0]) if(vars.originalPayload.candidate.email[0]?)
}]]]></http:query-params>
		</http:request>
		<ee:transform doc:name="Transform Message" doc:id="66d1fd50-d593-4be3-96f0-ef841b5466cd" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="candidate" ><![CDATA[%dw 2.0
output application/json
---
 if(payload.Get_Candidates_Response.Response_Data !=null ) payload.Get_Candidates_Response.Response_Data[0] else {}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
	</flow>
</mule>

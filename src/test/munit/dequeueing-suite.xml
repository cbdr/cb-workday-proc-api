<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="dequeueing-suite.xml" />
	<munit:test name="queueingFlow-test" doc:id="8fc0fc1e-ea2e-4467-9872-698ad62c826b" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference to process candidates" doc:id="7dda3670-92cc-40b5-9d12-e48971e8357c" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="459f6819-0891-481d-83db-a93545046476" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/xml --- readUrl('classpath://queueingFlowtest/mock_payload.dwl')]" mediaType="application/xml" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://queueingFlowtest/mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="candidate" value="#[output application/json --- readUrl('classpath://queueingFlowtest/mock_variable_.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="candidateAlreadyAppliedToJob" value="#[output application/json --- readUrl('classpath://queueingFlowtest/mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://queueingFlowtest/mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="client_secret" value="#[output application/java --- readUrl('classpath://queueingFlowtest/mock_variable_3.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="client_id" value="#[output application/java --- readUrl('classpath://queueingFlowtest/mock_variable_4.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="a0e87042-6d96-4d2c-8dff-f3ae2c9343e6" >
				<munit:payload value="#[output application/json --- readUrl('classpath://queueingFlowtest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[output application/java --- readUrl('classpath://queueingFlowtest/set-event_attributes.dwl')]" mediaType="application/java" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to queueingFlow" doc:id="ca975237-8e08-4af1-9abf-b843383a20b1" name="queueingFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="bc4bcdea-7474-472d-ae08-6677887e1720" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import queueingFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>

</mule>
